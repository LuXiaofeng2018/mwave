#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Mwave
\end_layout

\begin_layout Part
Theory
\end_layout

\begin_layout Section
Nomenclature
\end_layout

\begin_layout Description
\begin_inset Formula $p$
\end_inset

 pressure
\end_layout

\begin_layout Description
\begin_inset Formula $\eta$
\end_inset

 wave elevation
\end_layout

\begin_layout Description
\begin_inset Formula $\boldsymbol{v}$
\end_inset

 velocity
\end_layout

\begin_layout Description
\begin_inset Formula $\rho$
\end_inset

 water density
\end_layout

\begin_layout Description
\begin_inset Formula $g$
\end_inset

 gravitational constant
\end_layout

\begin_layout Description
\begin_inset Formula $H_{s}$
\end_inset

 significant wave height
\end_layout

\begin_layout Description
\begin_inset Formula $T$
\end_inset

 wave period
\end_layout

\begin_layout Description
\begin_inset Formula $\omega$
\end_inset

 radial wave frequency, 
\begin_inset Formula $\omega=\dfrac{2\pi}{T}$
\end_inset


\end_layout

\begin_layout Description
\begin_inset Formula $k_{0}$
\end_inset

 progressive wave number
\end_layout

\begin_layout Section
Linear Wave-body Boundary Value Problem
\end_layout

\begin_layout Section
Solutions to the Linear Wave-body BVP
\end_layout

\begin_layout Subsection
Plane Waves
\end_layout

\begin_layout Subsection
Outgoing Circular Waves
\end_layout

\begin_layout Subsection
Incident Circular Waves
\end_layout

\begin_layout Subsection
Boundary Element Method
\end_layout

\begin_layout Section
Wave Field Decomposition
\end_layout

\begin_layout Section
Array Interactions
\end_layout

\begin_layout Section
Motions and Power
\end_layout

\begin_layout Section
Wave Energy Flux
\end_layout

\begin_layout Section
Wave Spectra
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Part
Classes and Functions
\end_layout

\begin_layout Section
Wave
\end_layout

\begin_layout Standard
This section describes the set of classes used to hold or compute information
 about waves or wave fields.
 There is a distinction made here between a 'wave' and a 'wave field'.
 A wave (or wave component) contains information (e.g.
 amplitude, phase, direction) about a set of incident or outgoing waves,
 but does not hold or compute field values (e.g.
 pressure, velocity, wave elevation, significant wave height, spectra).
 A wave field is defined by a set of waves and does contain or compute field
 values.
\end_layout

\begin_layout Subsection
Waves
\end_layout

\begin_layout Standard
A wave component ('wave') is not a wave field, but it holds values that
 specify a single linear wave.
 IWaves is an interface (and abstract class) to describe classes that hold
 a vector of wave components.
 IWaves classes are used throughout the WaveField and HydroComp set of classes.
 IWaves objects do not compute wave field properties (e.g.
 pressure, elevation, velocity).
 They do compute wave properties (e.g.
 solve the dispersion relation).
 There are two types of wave components:
\end_layout

\begin_layout Itemize
PlaneWaves - long-crested plane waves.
 They are incident waves.
 
\end_layout

\begin_layout Itemize
CirWaves - circular waves.
 Can be incident (i.e.
 short-crested waves) or outgoing (radiated or scattered waves).
 
\end_layout

\begin_layout Subsubsection
IWaves
\end_layout

\begin_layout Standard
IWaves classes contain a vector (
\begin_inset Formula $N\times1$
\end_inset

) of wave component information.
 IWaves is probably best described by its properties:
\end_layout

\begin_layout Itemize
A - Wave amplitudes (m).
 Real wave magnitude.
\end_layout

\begin_layout Itemize
Epsilon - Phases (rad).
 Real wave phase.
 
\end_layout

\begin_layout Itemize
Beta - Principle wave directions (rad) 
\end_layout

\begin_layout Itemize
UniformDir - Indicates whether all priciple wave directions (Beta) are the
 same.
\end_layout

\begin_layout Itemize
T - Periods (s) 
\end_layout

\begin_layout Itemize
F - Frequencies (Hz) 
\end_layout

\begin_layout Itemize
Omega - Radial Frequencies (rad/s) 
\end_layout

\begin_layout Itemize
K - Wavenumbers (1/m) 
\end_layout

\begin_layout Itemize
Lambda - Wavelengths (m) 
\end_layout

\begin_layout Itemize
H - Depth (m) 
\end_layout

\begin_layout Itemize
C - Phase Speeds (m/s)
\end_layout

\begin_layout Itemize
Cg - Group Velocites (m/s)
\end_layout

\begin_layout Itemize
DepthTypes - Shallow, deep or intermediate
\end_layout

\begin_layout Itemize
Count - the number of wave components
\end_layout

\begin_layout Itemize
IsIncident - Indicates whether waves are an incident waves
\end_layout

\begin_layout Itemize
IsPlane - Indicates whether waves are a long-crested plane waves
\end_layout

\begin_layout Itemize
Mlim - Limit of truncation values of the circular coefficient for the circular
 modes based on the actual number of coefficients.
 Returned as a vector of the same size as the number of wave components.
\end_layout

\begin_layout Itemize
L - Truncation values of the circular coefficients for the evanescent modes.
 Returned as a vector of the same size as the number of wave components.
 A value of 0 indicates only propagating wave modes.
\end_layout

\begin_layout Itemize
KochinFunc - The Kochin function is the far-field amplitude as a function
 of direction.
 Returned as a vector of KochinFunc objects.
\end_layout

\begin_layout Itemize
CirCoefs - Circular coefficients describing the wave.
 Returned either as a cell array of the coefficients for each wave component
 or as the coeffcients at a given wave index.
 The coefficients are given as a matrix (see circular coefficients)
\end_layout

\begin_layout Standard
There are also some methods
\end_layout

\begin_layout Itemize
IncAmps - The incident amplitudes used with 1) the force transfer matrix
 to compute body forces or 2) the diffraction transfer matrix to compute
 the waves scattered by the body.
\end_layout

\begin_layout Itemize
Energy??
\end_layout

\begin_layout Itemize
EnergyFlux??
\end_layout

\begin_layout Subsubsection
PlaneWaves
\end_layout

\begin_layout Standard
Class that defines long-crested plane waves.
 They are always indicent waves.
 
\end_layout

\begin_layout Subsubsection
CirWaves
\end_layout

\begin_layout Standard
CirWaves defines circular waves.
 They can be incident ('In' in the inOrOut in constructor argument) or outgoing
 ('Out' in the inOrOut constructor argument).
 Incident circular waves are short-crested waves.
 Outgoing circular waves are radiated or scattered waves.
 CirWaves has a few additional properties:
\end_layout

\begin_layout Itemize
Coefs - the circular wave coefficients that define the class.
 
\end_layout

\begin_layout Itemize
Origin - location of origin of the circular waves
\end_layout

\begin_layout Subsubsection
KochinFunc
\end_layout

\begin_layout Standard
KochinFunc object contain information about a specific Kochin Function.
 A Kochin Function is function that describes the far-field behaviour of
 a wave as a function of direction.
 
\end_layout

\begin_layout Subsection
WaveFields
\end_layout

\begin_layout Standard
The WaveField set of classes is used to hold or compute values (e.g.
 pressure, velocity, wave elevation, significant wave height, spectra) of
 linear wave fields at disctrete points in space specified on either a grid
 (also referred to as an array) or at arbitrary (x,y,z) locations.
 All classes that are consider a wave field (i.e.
 do the things a wave field does) should implement the IWaveField interface,
 and should use the class nomenclature 'WaveField'.
\end_layout

\begin_layout Standard
WaveField classes depend on intrinsic values of pressure and velocity.
 (Although not all instances contain velocity).
 They do not compute these intrinsic values on the fly.
 They just hold the data.
 Pressure and velocity are either computed either externally (e.g.
 by WAMIT) or are computed at the initialization of the WaveField object
 (in the case of Functional Wave Fields).
 There are values that are derived from the intrinsic data and are computed
 by the WaveField object - e.g.
 wave elvation, significant wave height, spectra.
\end_layout

\begin_layout Standard
Because WaveField classes do not compute intrinsic values on the fly, they
 are limited to providing values at the discrete locations that are specified
 at initialization.
 These values can either be over a grid of (x,y) points on the mean free-surface
 (z=0) or are arbitrary (x,y,z) points where z<=0.
\end_layout

\begin_layout Standard
The basic WaveField describes at a minimum what the WaveField classes should
 be able to do.
 All wave field classes should implement the interface (and abstract class)
 IWaveField.
 A WaveField is defined by:
\end_layout

\begin_layout Itemize
the wave field points - The spatial locations where the WaveField is evaluated.
 An array (i.e.
 a grid 
\begin_inset Formula $x\times y$
\end_inset

 at 
\begin_inset Formula $z=0$
\end_inset

) or a list of arbitrary 
\begin_inset Formula $\left\{ x,y,x\right\} $
\end_inset

 points.
\end_layout

\begin_layout Itemize
water density
\end_layout

\begin_layout Itemize
a set of wave periods - The WaveField can contain multiple wave periods
 because in linear wave theory, waves at these periods are indepedent of
 one another - i.e.
 they don't interact.
 When one wants to carry data for multiple wave fields at the same wave
 period, he should use a WaveFieldCollection (or a class derived from it).
\end_layout

\begin_layout Itemize
a water depth - a uniform constant depth (for now)
\end_layout

\begin_layout Itemize
pressure and velocity values at the wave field points
\end_layout

\begin_layout Subsubsection
IWaveField
\end_layout

\begin_layout Standard
Interface class for WaveFields.
 True interfaces don't exist in Matlab, so it is really an abstract class
 and it contains come some implemented methods.
 All WaveField must be dervide (directly or indirectly) from this class.
\end_layout

\begin_layout Standard
The IWaveField properties are:
\end_layout

\begin_layout Itemize
IsArray - Boolean indication as to where the wave field is an array (grid)
 of points or and list of arbitrary 
\begin_inset Formula $\left\{ x,y,x\right\} $
\end_inset

 points.
\end_layout

\begin_layout Itemize
HasVelocity - Boolean indication as to whether the wave field contains velocity
 values at field points.
 All WaveFields must pressure values, but velocity is optional.
\end_layout

\begin_layout Itemize
Rho - Water density
\end_layout

\begin_layout Itemize
G - Gravitational constant
\end_layout

\begin_layout Itemize
T - List of the wave periods
\end_layout

\begin_layout Itemize
H - Water depth
\end_layout

\begin_layout Standard
The IWaveField methods are:
\end_layout

\begin_layout Itemize
FieldPoints - Returns the location of the wave field values as an array
 (i.e.
 a grid 
\begin_inset Formula $x\times y$
\end_inset

 at 
\begin_inset Formula $z=0$
\end_inset

) or a list of arbitrary 
\begin_inset Formula $\left\{ x,y,x\right\} $
\end_inset

 points.
\end_layout

\begin_layout Itemize
FindClosestPoint - Finds the closest point and its indicies of the given
 input point.
\end_layout

\begin_layout Itemize
Pressure - Returns pressure (
\begin_inset Formula $p$
\end_inset

) at the field points.
\end_layout

\begin_layout Itemize
Elevation - Returns elevation (
\begin_inset Formula $\eta$
\end_inset

) at the field points.
 Elevation is computed as 
\begin_inset Formula $\eta=\dfrac{1}{\rho g}\left.p\right|_{z=0}$
\end_inset

.
 
\end_layout

\begin_layout Itemize
Velocity - Return velocity (
\begin_inset Formula $\boldsymbol{v}$
\end_inset

) at the field points.
\end_layout

\begin_layout Itemize
SigWaveHeight - Returns the significant wave height (
\begin_inset Formula $H_{s}$
\end_inset

) at the field points.
 
\end_layout

\begin_layout Itemize
Spectra - Returns wave spectra at each location or at specified locations
 if the option 'Points' is used.
 Spectra are returned as WaveSpectrum objects.
 
\end_layout

\begin_layout Itemize
EnergyFlux - Returns the energy flux through a control surface.
 
\end_layout

\begin_layout Standard
IWaveField also implements several overloaded mathematical operators
\end_layout

\begin_layout Itemize
'a=b' - Determines whether two IWaveFields (a and b) are equivalent.
 Equivalence is needed for some of the other math operations: '+' and '-'.
 
\end_layout

\begin_layout Itemize
'a~=b' - Opposite of equivalence.
\end_layout

\begin_layout Itemize
'a+b' - Adds two equivalent IWaveFields.
\end_layout

\begin_layout Itemize
'-a' - Takes the negative of the IWaveField.
\end_layout

\begin_layout Itemize
'a-b' - Subtracts two equivalent IWaveFields.
\end_layout

\begin_layout Itemize
'c*a' - Multiplies a constant value or values, 'c', ('c' is NOT a WaveField)
 by IWaveField 'a'.
\end_layout

\begin_layout Itemize
'c.*a' - Same as 'c*a'.
\end_layout

\begin_layout Subsubsection
WaveField
\end_layout

\begin_layout Standard
Most elementrary WaveField class.
 It does not have any means to compute its intrinsic properties: wave pressure
 and velocity at field points.
 These are provided as data when an object in initialized.
\end_layout

\begin_layout Standard
WaveField has a particular implementation of the IWaveField methods which
 are:
\end_layout

\begin_layout Itemize
Pressure - Values are returned as an 
\begin_inset Formula $N_{T}\times1$
\end_inset

 cell array where 
\begin_inset Formula $N_{T}$
\end_inset

 is the number of wave periods.
 In each cell is matrix (for arrays) or vector (for arbitrary points) of
 pressure values.
\end_layout

\begin_layout Itemize
Elevation - Values are returned as an 
\begin_inset Formula $N_{T}\times1$
\end_inset

 cell array where 
\begin_inset Formula $N_{T}$
\end_inset

 is the number of wave periods.
 In each cell is matrix (for arrays) or vector (for arbitrary points) of
 elevation values.
\end_layout

\begin_layout Itemize
Velocity - Values are returned as an 
\begin_inset Formula $N_{T}\times3$
\end_inset

 cell array where 
\begin_inset Formula $N_{T}$
\end_inset

 is the number of wave periods and the second index indicates the component
 velocity in the 
\begin_inset Formula $x,y,z$
\end_inset

 directions respectively.
 In each cell is matrix (for arrays) or vector (for arbitrary points) of
 component velocity values.
\end_layout

\begin_layout Itemize
SigWaveHeight - 
\begin_inset Formula $H_{s}=4\sqrt{\sum_{i=1}^{N_{T}}\frac{1}{2}\eta^{2}\left(T_{i}\right)}$
\end_inset

, where 
\begin_inset Formula $\eta\left(T_{i}\right)$
\end_inset

 is the elevation due to the 
\begin_inset Formula $i^{th}$
\end_inset

 wave period and 
\begin_inset Formula $N_{T}$
\end_inset

 is the number of wave periods.
 Values are returned as a matrix (for arrays) or vector (for arbitrary points)
 of 
\begin_inset Formula $H_{s}$
\end_inset

values.
\end_layout

\begin_layout Itemize
Spectra -Values are returned as a matrix (for arrays) or vector (for arbitrary
 points) of WaveSpectra objects.
\end_layout

\begin_layout Itemize
EnergyFlux - Returns the energy flux through a control surface.
 
\end_layout

\begin_layout Standard
WaveField has a particular implementation of the IWaveField overloaded mathemati
cal operators
\end_layout

\begin_layout Itemize
'a=b' - Equivalence for basic WaveFields means that both have the same water
 density, depth, field points, and wave periods.
\end_layout

\begin_layout Itemize
'a~=b' - Opposite of equivalence.
\end_layout

\begin_layout Itemize
'a+b' - Two equivalent WaveFields by adding the pressure values and velocity
 values at each field point and for each period.
 Returns a new WaveField.
\end_layout

\begin_layout Itemize
'-a' - Takes the negative of the pressure values and velocity values at
 each field point and for each period.
 Returns a new WaveField.
\end_layout

\begin_layout Itemize
'a-b' - Equivalent WaveFields are subtracted by subtracting the pressure
 values and velocity values at each field point and for each period.
 Returns a new WaveField.
\end_layout

\begin_layout Itemize
'c*a' - 'c' can either be a scalar of a vector ('c' is NOT a WaveField)
 whose length is equal to the number of wave periods.
 If 'c' is a scalar it is multiplied by the pressure values and velocity
 values at each field point and for each period.
 If 'c' is a vector, it is multiplied component-wise by the pressure values
 and velocity values at each wave period.
 Returns a new WaveField.
\end_layout

\begin_layout Itemize
'c.*a' - Same as 'c*a'.
\end_layout

\begin_layout Subsubsection
WaveFieldCollection
\end_layout

\begin_layout Standard
In some cases, WaveFields at the same period should be organized together.
 For example, WAMIT computes the diffracted wave fields due to plane incident
 waves at different directions (but at the same period).
 
\end_layout

\begin_layout Standard
A WaveFieldCollection contains a set of WaveFields that all have the same
 periods.
 The WaveFieldCollection is organized by another parameter called an index
 (such as wave direction).
 These indicies are given a type (i.e.
 name), which must be a string and should describe the collection.
 The indices themselves do not need to be numeric.
 For example, they could be a cell array of strings that describes each
 wave field.
\end_layout

\begin_layout Standard
All the WaveFields in the collection must be equivalent.
 A WaveFieldCollection can also be a collection of WaveFieldCollection,
 where the internal WaveFieldCollections must be equivalent.
\end_layout

\begin_layout Standard
Outputs (pressure, elevation, etc.) from the WaveFieldCollection are organized
 by wave period then the collection index, because wave period is the primary
 orgainzation parameter for wave fields.
 That is, because in linear wave theory, waves at different periods do not
 interact, while waves at the same period may interact (depending on how
 they are defined).
 For a WaveFieldCollection that is a collection of WaveFieldCollections,
 the output is organized by wave period then the index of the primary WaveFieldC
ollection, then the index of the collections within the primary, etc.
\end_layout

\begin_layout Standard
WaveFieldCollections has a particular implementation of the IWaveField methods
 which are:
\end_layout

\begin_layout Itemize
Pressure - Values are returned as an 
\begin_inset Formula $N_{T}\times N_{i}\times1$
\end_inset

 cell array where 
\begin_inset Formula $N_{T}$
\end_inset

 is the number of wave periods, and 
\begin_inset Formula $N_{i}$
\end_inset

 is the number of IWaveFields in the collection.
 For WaveFieldCollections that are collections of WaveFieldCollection, the
 cell array is of size 
\begin_inset Formula $N_{T}\times N_{i-1}\times N_{i-2}\times1$
\end_inset

, where 
\begin_inset Formula $N_{_{i-1}}$
\end_inset

 is the number of WaveFieldCollections in the primary WaveFieldCollection,
 and 
\begin_inset Formula $N_{i-2}$
\end_inset

 is the number of WaveFields each of those WaveFieldCollections.
 This pattern can be continued indefinitely for WaveFieldCollections of
 WaveFieldCollections of WaveFieldCollections, etc., the cell array size
 is: 
\begin_inset Formula $N_{T}\times N_{i-1}\times N_{i-2}\times\ldots\times1$
\end_inset

.
 In each cell is matrix (for arrays) or vector (for arbitrary points) of
 pressure values.
\end_layout

\begin_layout Itemize
Elevation - Values are returned as an 
\begin_inset Formula $N_{T}\times N_{i}\times1$
\end_inset

 cell array where 
\begin_inset Formula $N_{T}$
\end_inset

 is the number of wave periods, and 
\begin_inset Formula $N_{i}$
\end_inset

 is the number of IWaveFields in the collection.
 For WaveFieldCollections that are collections of WaveFieldCollection, see
 'Pressure.' In each cell is matrix (for arrays) or vector (for arbitrary
 points) of elevation values.
\end_layout

\begin_layout Itemize
Velocity - Values are returned as an 
\begin_inset Formula $N_{T}\times N_{i}\times3$
\end_inset

 cell array where 
\begin_inset Formula $N_{T}$
\end_inset

 is the number of wave periods, 
\begin_inset Formula $N_{i}$
\end_inset

 is the number of IWaveFields in the collection, and the last index indicates
 the component velocity in the 
\begin_inset Formula $x,y,z$
\end_inset

 directions respectively.
 For WaveFieldCollections that are collections of WaveFieldCollection, see
 'Pressure.' In each cell is matrix (for arrays) or vector (for arbitrary
 points) of component velocity values.
\end_layout

\begin_layout Itemize
SigWaveHeight - 
\begin_inset Formula $H_{s-i}=4\sqrt{\sum_{j=1}^{N_{T}}\frac{1}{2}\eta_{i}^{2}\left(T_{j}\right)}$
\end_inset

, where 
\begin_inset Formula $\eta_{i}\left(T_{j}\right)$
\end_inset

 is the elevation of the 
\begin_inset Formula $i^{th}$
\end_inset

 WaveField due to the 
\begin_inset Formula $j^{th}$
\end_inset

 wave period and 
\begin_inset Formula $N_{T}$
\end_inset

 is the number of wave periods.
 Values are returned as an 
\begin_inset Formula $N_{i}\times1$
\end_inset

 cell array, where 
\begin_inset Formula $N_{i}$
\end_inset

 is the number of IWaveFields in the collection.
 For WaveFieldCollections that are collections of WaveFieldCollection, see
 'Pressure.' In each cell is matrix (for arrays) or vector (for arbitrary
 points) of pressure values of 
\begin_inset Formula $H_{s}$
\end_inset

values.
 
\begin_inset Newline newline
\end_inset

The optional argument 'Merge' can used, in which case, the WaveFields are
 merged together, and 
\begin_inset Formula $H_{s}=4\sqrt{\sum_{i=1}^{N_{i}}\sum_{j=1}^{N_{T}}\frac{1}{2}\eta_{i}^{2}\left(T_{j}\right)}$
\end_inset

.
 For WaveFieldCollections that are collections of WaveFieldCollections,
 the 'Merge' is carried down through all WaveFields.
 Values are then returned as a matrix (for arrays) or vector (for arbitrary
 points) of 
\begin_inset Formula $H_{s}$
\end_inset

values.
\end_layout

\begin_layout Itemize
Spectra -Values are returned as an 
\begin_inset Formula $N_{i}\times1$
\end_inset

 cell array, where 
\begin_inset Formula $N_{i}$
\end_inset

 is the number of IWaveFields in the collection.
 For WaveFieldCollections that are collections of WaveFieldCollection, see
 'Pressure.' In each cell is a matrix (for arrays) or vector (for arbitrary
 points) of WaveSpectra objects.
\begin_inset Newline newline
\end_inset

The optional argument 'Merge' can used, in which case, the WaveFields are
 merged together to create a directional wave spectrum.
 This cannot be done for collections of WaveFieldCollections.
 Values are then returned as a matrix (for arrays) or vector (for arbitrary
 points) of WaveSpectra objects.
\end_layout

\begin_layout Itemize
EnergyFlux - Returns the energy flux through a control surface.
 
\end_layout

\begin_layout Standard
WaveField has a particular implementation of the IWaveField overloaded mathemati
cal operators
\end_layout

\begin_layout Itemize
'a=b' - Equivalence can be checked between 
\begin_inset Newline newline
\end_inset

a WaveFieldCollection and another WaveFieldCollection - both must be the
 same collection type, have the same indices, and their WaveFields must
 be equivalent.
 
\begin_inset Newline newline
\end_inset

a WaveFieldCollection and a WaveField - the WaveField must be equivalent
 to the WaveFields in the WaveFieldCollection.
\end_layout

\begin_layout Itemize
'a~=b' - Opposite of equivalence.
\end_layout

\begin_layout Itemize
'a+b' - 
\begin_inset Newline newline
\end_inset

A WaveFieldCollection can be added to another WaveFieldCollection - WaveFields
 at corresponding indices are added together.
 Returns a new WaveFieldCollection.
\end_layout

\begin_layout Itemize
A WaveField can be added to a WaveFieldCollection - the single WaveField
 is added to each WaveField in the WaveFieldCollection.
 Returns a new WaveFieldCollection.
\end_layout

\begin_layout Itemize
'-a' - Takes the negative of each WaveField in the WaveFieldCollection.
 Returns a new WaveFieldCollection.
\end_layout

\begin_layout Itemize
'a-b' - Consider this to be adding WaveField 'a' to the negative of WaveField
 'b'.
 Returns a new WaveFieldCollection.
\end_layout

\begin_layout Itemize
'c*a' - 'c' can either be a scalar of a matrix ('c' is NOT a WaveField)
 whose size is equal to the total collection size: 
\begin_inset Formula $N_{T}\times N_{i-1}\times N_{i-2}\times\ldots\times1$
\end_inset

 (see, 'Pressure').
 If 'c' is a scalar it is multiplied each WaveField in the collection.
 If 'c' is a matrix, the submatrix, 
\begin_inset Formula $N_{T}\times N_{i}$
\end_inset

 is multiplied each WaveField in the collection.
 Returns a new WaveField.
\end_layout

\begin_layout Itemize
'c.*a' - Same as 'c*a'.
\end_layout

\begin_layout Subsubsection
FuncWaveField
\end_layout

\begin_layout Standard
A FuncWaveField is an abstract class that aids in the creation of a 'functional'
 WaveField, that is, a WaveField where the values are computed by MATLAB
 at the initialization of the class.
 Any class that inherits from FuncWaveField must pass into its constructor
 an anonymous function that computes the wave field values over the field
 points for a given wave component.
 
\end_layout

\begin_layout Subsubsection
PlaneWaveField
\end_layout

\begin_layout Standard
A PlaneWaveField is a subclass of FuncWaveField that creates a wave field
 defined by plane waves at the same direction.
\end_layout

\begin_layout Subsubsection
CirWaveField
\end_layout

\begin_layout Standard
A CirWaveField is a subclass of FuncWaveField that creates an outgoing circular
 wave field defined by circular wave coefficients.
\end_layout

\begin_layout Subsubsection
PntSrcWaveField
\end_layout

\begin_layout Standard
A PntSrcWaveField (PntSrc stands for 'point source') is a subclass of CirWaveFie
ld that creates either a heaving or a surging wave field.
\end_layout

\begin_layout Subsubsection
IncCirWaveField
\end_layout

\begin_layout Standard
An IncCirWaveField is a subclass of FuncWaveField that creates an incident
 circular ('short-crested') wave field defined by circular wave coefficients.
\end_layout

\begin_layout Subsubsection
KochinWaveField
\end_layout

\begin_layout Standard
A KochinWaveField is a subclass of FuncWaveField that creates an outgoing
 circular wave field defined by a Kochin Function.
 The KochinWaveField uses the far-field approximation of a circular wave
 field and should not be considered accurate near the source of the wave
 field.
 
\end_layout

\begin_layout Subsubsection
FBWaveField
\end_layout

\begin_layout Standard
In linear wave theory, the wave field around one or more floating bodies
 can be formed as the superposition of an incident wave field, a wave field
 scattered by the body(ies) held fixed, and radiated wave fields due to
 body motions in each degree of freedom.
\end_layout

\begin_layout Standard
The FBWaveField (FB = 'FloatingBody') is a WaveField that handles the floating
 body situation.
 It contains 
\end_layout

\begin_layout Itemize
Incident wave field(s) - must be IIncWaveField.
 One or more.
 Multiple wave fields must be supplied as a WaveFieldCollection.
 For example, IncWaveField is a WaveFieldCollection that implements IIncWaveFiel
d.
 Supplied at object initialization.
\end_layout

\begin_layout Itemize
Scattered wave field(s) - can be any type of WaveField.
 One or more.
 Multiple wave fields must be supplied as a WaveFieldCollection.
 The number of scattered wave fields must equal the number of incident wave
 fields.
 Supplied at object initialization.
\end_layout

\begin_layout Itemize
Radiated wave field(s) - can be any type of WaveField.
 Zero or more.
 The number of radiated wave fields must equal the total number of degrees
 of freedom of the floating body or floating body array.
 Zero radiated wave fields means the body or bodies are held fixed.
 Supplied at object initialization.
\end_layout

\begin_layout Itemize
Body motion(s) - an array of complex amplitudes which are the amplitude
 and phase of the body motions in each degree of freedom of the body or
 array due to each incident wave.
 The size of the body motins array must be [Nperiod, Nincident, Ndof].
 Optional argument at object initialization, and can be supplied or changed
 through the 'BodyMotions' property after object initialization.
 
\end_layout

\begin_layout Standard
Wave field values (pressure, elevation, velocity, etc.) are returned for
 a given type of WaveField, where the type of wave field is included as
 an optional argument for the method: 
\end_layout

\begin_layout Itemize
'Incident'
\end_layout

\begin_layout Itemize
'Scattered' 
\end_layout

\begin_layout Itemize
'Diffracted' - Incident plus Scattered
\end_layout

\begin_layout Itemize
'Radiated' - if the 'BodyMotions' property is empty, then the raw ('unit-amplitu
de') radiated wave fields are returned.
 If there are body motions available, then
\end_layout

\begin_layout Subsection
Wave Field Decomposition
\end_layout

\begin_layout Subsubsection
waveDecomp
\end_layout

\begin_layout Subsubsection
makeCirWFPoints
\end_layout

\begin_layout Subsubsection
reshapeCirWFPoints
\end_layout

\begin_layout Subsubsection
cylinderWaveCoeffs
\end_layout

\begin_layout Subsection
Wave Spectra
\end_layout

\begin_layout Subsubsection
WaveSpectrum
\end_layout

\begin_layout Subsubsection
bretschneider
\end_layout

\begin_layout Subsubsection
cosSpectSpread
\end_layout

\begin_layout Subsection
Plotting
\end_layout

\begin_layout Subsubsection
plotWaveArrow
\end_layout

\begin_layout Section
Body
\end_layout

\begin_layout Subsection
Geometry
\end_layout

\begin_layout Subsubsection
Panel
\end_layout

\begin_layout Subsubsection
PanelGeo
\end_layout

\begin_layout Subsubsection
makePanel_
\end_layout

\begin_layout Subsection
Motions
\end_layout

\begin_layout Subsubsection
ModesOfMotion
\end_layout

\begin_layout Subsubsection
IMotionFunc
\end_layout

\begin_layout Subsubsection
SurgeFunc
\end_layout

\begin_layout Subsubsection
SwayFunc
\end_layout

\begin_layout Subsubsection
HeaveFunc
\end_layout

\begin_layout Subsubsection
RollFunc
\end_layout

\begin_layout Subsubsection
PitchFunc
\end_layout

\begin_layout Subsubsection
YawFunc
\end_layout

\begin_layout Subsubsection
HingeYFunc
\end_layout

\begin_layout Subsubsection
MotionsVideo
\end_layout

\begin_layout Subsubsection
plotMotionArrow
\end_layout

\begin_layout Subsection
Mass
\end_layout

\begin_layout Subsubsection
MassPoint
\end_layout

\begin_layout Subsubsection
QuadMassPoint
\end_layout

\begin_layout Subsubsection
MassBody
\end_layout

\begin_layout Subsubsection
makeMass_
\end_layout

\begin_layout Subsubsection
makePanelMass_
\end_layout

\begin_layout Subsection
Floating Bodies
\end_layout

\begin_layout Subsubsection
FloatingBody
\end_layout

\begin_layout Subsubsection
FloatingCylinder
\end_layout

\begin_layout Subsubsection
FloatingFlap
\end_layout

\begin_layout Subsubsection
FloatingAttenuator
\end_layout

\begin_layout Subsubsection
FloatingSphereEndCyl
\end_layout

\begin_layout Subsubsection
FloatingSphereEndCylHinge
\end_layout

\begin_layout Subsubsection
FloatingDuck
\end_layout

\begin_layout Subsection
Hydrodynamic Bodies
\end_layout

\begin_layout Standard
Hydrodynamic body classes combine body information (mass, moments of inertia,
 and linear mechanical forces) with hydrodynamic force information and make
 computations of body motions and WEC power absorption.
\end_layout

\begin_layout Subsubsection
HydroForces
\end_layout

\begin_layout Standard
HydroForces objects contain information about hydrodynamic forces on a body
 or array of bodies.
 Body information is not present per se, except via the DoF.
 The information in HydroForces is typically computed by an external program
 such as WAMIT.
 In the computation of excitation forces (for WAMIT and most other programs),
 long-crested waves are used as the incident waves, and these are described
 by a vector of incident wave directions.
 The properties of the class are:
\end_layout

\begin_layout Itemize
T - wave periods (
\begin_inset Formula $N_{T}\times1$
\end_inset

)
\end_layout

\begin_layout Itemize
Beta - incident wave directions (
\begin_inset Formula $N_{\beta}\times1$
\end_inset

)
\end_layout

\begin_layout Itemize
A - Added mass matrix (
\begin_inset Formula $N_{T}\times N_{DoF}\times N_{DoF}$
\end_inset

)
\end_layout

\begin_layout Itemize
B - Hydrodynamic Damping matrix (
\begin_inset Formula $N_{T}\times N_{DoF}\times N_{DoF}$
\end_inset

)
\end_layout

\begin_layout Itemize
C - Hydrostatic stiffness matrix (
\begin_inset Formula $N_{DoF}\times N_{DoF}$
\end_inset

)
\end_layout

\begin_layout Itemize
Fex - Excitation forces (
\begin_inset Formula $N_{T}\times N_{\beta}\times N_{DoF}$
\end_inset

)
\end_layout

\begin_layout Itemize
DoF - Number of degrees of freedom 
\end_layout

\begin_layout Itemize
H - Water depth 
\end_layout

\begin_layout Itemize
Rho - Fluid density
\end_layout

\begin_layout Subsubsection
HydroBody
\end_layout

\begin_layout Standard
A HydroBody is a FloatingBody that also contains generic hydrodynamic force
 information, which includes added mass, damping, hydrostatic stiffness,
 force transfer matrices, diffraction transfer matrices, and radiation coefficie
nts.
 Excitation force is not included because it is not 'generic', that is,
 it depends on the incident wave.
 Excitation force is computed with the force transfer matrix.
\end_layout

\begin_layout Standard
The values contained in this class are sufficient to compute the body motions
 and wave fields due to any incident wave.
 However, the class itself does not perform these computations; computations
 are performed by an IHydroComp class.
\end_layout

\begin_layout Subsubsection
computeHydroBody
\end_layout

\begin_layout Subsubsection
IHydroComp
\end_layout

\begin_layout Subsubsection
HydroBodyComp
\end_layout

\begin_layout Subsubsection
HydroArrayComp
\end_layout

\begin_layout Section
WAMIT
\end_layout

\begin_layout Subsection
Setting up WAMIT Runs
\end_layout

\begin_layout Subsubsection
WamitRunCondition
\end_layout

\begin_layout Subsubsection
WamitFieldArray
\end_layout

\begin_layout Subsection
Reading WAMIT Runs
\end_layout

\begin_layout Subsubsection
WamitResult
\end_layout

\begin_layout Subsubsection
Wamit_read1
\end_layout

\begin_layout Subsubsection
Wamit_read2
\end_layout

\begin_layout Subsubsection
Wamit_readHst
\end_layout

\begin_layout Subsubsection
Wamit_readNum6p
\end_layout

\begin_layout Subsubsection
Wamit_readNum6v
\end_layout

\begin_layout Subsubsection
Wamit_readGdf
\end_layout

\begin_layout Section
Utility
\end_layout

\end_body
\end_document
